### **Best Practices for Using the AWS SDK for Deployment**

#### **1. Use Modular Scripts**
- Write modular deployment scripts for each resource type.
- Example structure:
  ```
  deploy/
    deployS3Bucket.ts
    deployDynamoDBTable.ts
    deployLambdaFunction.ts
  ```
- Each script should:
  - Accept input parameters (e.g., resource names, configurations).
  - Contain reusable functions for operations like checking resource existence.

#### **2. Use the AWS SDK Clients Efficiently**
- Create and reuse AWS SDK clients instead of creating new ones in every function.
- Example:
  ```typescript
  import { S3Client } from "@aws-sdk/client-s3";

  const s3Client = new S3Client({ region: "us-east-1" });
  export default s3Client;
  ```

#### **3. Implement Idempotency**
- Ensure your scripts can be safely re-run without creating duplicate resources.
- Example:
  - Check if an S3 bucket exists before creating it:
    ```typescript
    import { S3Client, HeadBucketCommand } from "@aws-sdk/client-s3";

    const bucketExists = async (bucketName: string): Promise<boolean> => {
      const client = new S3Client({ region: "us-east-1" });
      try {
        await client.send(new HeadBucketCommand({ Bucket: bucketName }));
        return true;
      } catch (error: any) {
        return false;
      }
    };
    ```

#### **4. Handle Dependencies Explicitly**
- Manage dependencies between resources in your scripts.
- Example:
  - Ensure an IAM role is created before attaching it to a Lambda function.

#### **5. Use Environment-Specific Parameters**
- Parameterize your scripts for different environments (e.g., dev, staging, prod).
- Example:
  ```typescript
  const config = {
    dev: { bucketName: "my-dev-bucket" },
    prod: { bucketName: "my-prod-bucket" },
  };

  const env = process.env.ENV || "dev";
  const bucketName = config[env].bucketName;
  ```

#### **6. Implement Robust Error Handling**
- Use `try-catch` blocks and implement retries for transient errors.
- Log errors for debugging:
  ```typescript
  try {
    await client.send(command);
  } catch (error: any) {
    console.error("Error creating resource:", error.message);
  }
  ```

#### **7. Automate Deployment with CI/CD**
- Integrate deployment scripts into CI/CD pipelines.
- Example:
  - Use a `deploy.ts` script that orchestrates all deployment logic:
    ```bash
    node deploy.ts --env prod
    ```

------------------------------------------------------------------------------
------------------------------------------------------------------------------

### **Patterns for Using the AWS SDK**

#### **1. Wrapper Functions for Common Operations**
Encapsulate common AWS SDK operations in reusable functions.

Example:
```typescript
import { S3Client, CreateBucketCommand, HeadBucketCommand } from "@aws-sdk/client-s3";

const s3Client = new S3Client({ region: "us-east-1" });

export const createBucket = async (bucketName: string): Promise<void> => {
  try {
    await s3Client.send(new CreateBucketCommand({ Bucket: bucketName }));
    console.log(`Bucket ${bucketName} created successfully.`);
  } catch (error) {
    console.error(`Failed to create bucket ${bucketName}:`, error.message);
  }
};

export const bucketExists = async (bucketName: string): Promise<boolean> => {
  try {
    await s3Client.send(new HeadBucketCommand({ Bucket: bucketName }));
    return true;
  } catch {
    return false;
  }
};
```

---

#### **2. Deployment Orchestrator**
Create a central script to orchestrate the deployment of multiple resources.

Example:
```typescript
import { createBucket, bucketExists } from "./deployS3Bucket";
import { deployDatabase } from "./deployDatabase";

const deploy = async (): Promise<void> => {
  const bucketName = "my-app-bucket";

  if (!(await bucketExists(bucketName))) {
    await createBucket(bucketName);
  }

  await deployDatabase();
};

deploy().catch((error) => console.error("Deployment failed:", error));
```

---

#### **3. Use a Configuration File**
Store reusable configurations in a `config` file.

Example:
```typescript
// config.ts
export const config = {
  region: "us-east-1",
  environments: {
    dev: {
      bucketName: "my-dev-bucket",
      dbInstance: "dev-db-instance",
    },
    prod: {
      bucketName: "my-prod-bucket",
      dbInstance: "prod-db-instance",
    },
  },
};
```

------------------------------------------------------------------------------
------------------------------------------------------------------------------

### **How to Make SDK Deployments More Cohesive**

To ensure your SDK-deployed resources form a **coherent unit**, adopt the following strategies:

---

#### **1. Treat Resources as a Logical Group**
Even though resources are created individually, group them logically based on their role in the application.

- Use a **common naming convention** to tie resources together.
  - Example: Prefix resource names with the application or environment name (`myapp-dev-bucket`, `myapp-dev-lambda`).
- Store metadata (e.g., resource ARNs) in a **central configuration file or database** for easy reference.

---

#### **2. Create a Deployment Orchestrator**
Write a **deployment orchestrator script** to ensure resources are created, configured, and connected in the correct order.

**Example**:
```typescript
import { createBucket } from './deployS3Bucket';
import { createLambdaFunction } from './deployLambda';
import { createIAMRole } from './deployIAMRole';

const deploy = async () => {
  // Step 1: Create an S3 bucket
  const bucketName = 'myapp-dev-bucket';
  await createBucket(bucketName);

  // Step 2: Create an IAM role for the Lambda function
  const roleName = 'myapp-dev-lambda-role';
  const roleArn = await createIAMRole(roleName);

  // Step 3: Create a Lambda function and connect it to the bucket
  const lambdaName = 'myapp-dev-lambda';
  await createLambdaFunction(lambdaName, roleArn, bucketName);

  console.log('Deployment complete!');
};

deploy().catch((err) => console.error('Deployment failed:', err));
```

---

#### **3. Centralize Resource Tracking**
Use a configuration file or database to track the resources created by your SDK scripts. This helps you manage relationships between resources and makes future updates easier.

**Example**:
```json
{
  "resources": {
    "bucket": {
      "name": "myapp-dev-bucket",
      "arn": "arn:aws:s3:::myapp-dev-bucket"
    },
    "lambda": {
      "name": "myapp-dev-lambda",
      "arn": "arn:aws:lambda:us-east-1:123456789012:function:myapp-dev-lambda"
    },
    "iamRole": {
      "name": "myapp-dev-lambda-role",
      "arn": "arn:aws:iam::123456789012:role/myapp-dev-lambda-role"
    }
  }
}
```

---

#### **4. Use Environment-Specific Configurations**
Define configurations for different environments (e.g., dev, staging, prod). This ensures consistency and avoids hardcoding values.

**Example**:
```typescript
const config = {
  dev: {
    bucketName: 'myapp-dev-bucket',
    lambdaName: 'myapp-dev-lambda',
    iamRoleName: 'myapp-dev-lambda-role',
  },
  prod: {
    bucketName: 'myapp-prod-bucket',
    lambdaName: 'myapp-prod-lambda',
    iamRoleName: 'myapp-prod-lambda-role',
  },
};

export const getConfig = (env: 'dev' | 'prod') => config[env];
```

---

#### **5. Handle Dependencies Programmatically**
Ensure resources are created in the correct order and connected as needed. The AWS SDK does not inherently manage dependencies like CloudFormation.

**Example: Connecting an S3 Bucket to a Lambda Function**
1. Create the S3 bucket.
2. Create the Lambda function.
3. Update the bucket policy to grant the Lambda function access.

```typescript
import { S3Client, PutBucketPolicyCommand } from '@aws-sdk/client-s3';

const updateBucketPolicy = async (bucketName: string, lambdaArn: string): Promise<void> => {
  const client = new S3Client({ region: 'us-east-1' });
  const policy = {
    Version: '2012-10-17',
    Statement: [
      {
        Effect: 'Allow',
        Principal: { Service: 'lambda.amazonaws.com' },
        Action: 's3:GetObject',
        Resource: `arn:aws:s3:::${bucketName}/*`,
      },
    ],
  };

  const command = new PutBucketPolicyCommand({
    Bucket: bucketName,
    Policy: JSON.stringify(policy),
  });

  await client.send(command);
};
```

---

#### **6. Automate Cleanup**
Create a script to delete resources when they are no longer needed, similar to how a CloudFormation stack handles deletion.

**Example Cleanup Script**:
```typescript
import { deleteBucket } from './deployS3Bucket';
import { deleteLambdaFunction } from './deployLambda';
import { deleteIAMRole } from './deployIAMRole';

const cleanup = async () => {
  const bucketName = 'myapp-dev-bucket';
  const lambdaName = 'myapp-dev-lambda';
  const roleName = 'myapp-dev-lambda-role';

  await deleteLambdaFunction(lambdaName);
  await deleteBucket(bucketName);
  await deleteIAMRole(roleName);

  console.log('Cleanup complete!');
};

cleanup().catch((err) => console.error('Cleanup failed:', err));
```


---------------------
//check on cdk
sdk
    modular deployment scripts divided by resource type
    use aws client utilities
    should be idempot, check for existing resources
    handle dependencies between resources, eg iam role needed for lambda.
    error handling
    cicd deployment
    use utils/wrappers for common functions like createBucket(name), bucketExists(name) etc.
    Have a single orchestration script that can be called locally or via the cicd workflow
    Have a multi environment config file, json/yaml
    centralize resource tracking, names/arns/etc, in a file or db table.
    dependency injection?
    environment agnostic/ all through parameters